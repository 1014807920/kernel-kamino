				《NationalChip-pinctrl和NationalChip-gpio设备树中参数解释》

gpio id：全局的gpio id
hwgpio: 每个gpiochip下从0开始的gpio号
pin id: 每个pinctrl device下从0开始的pin号

pinctrl部分设备树参数解释：
# 一些控制器需要使用pinctrl的功能需要配置：
pinctrl-names = "default";     /* device和driver在match成功后，在driver->probe()之前会判断pinctrl-names是default或者init，如果是，会调用pinctrl接口进行管脚设置 */
pinctrl-0 = <&uart0_pins>;		/* pinctrl-0这个0对应第一个pinctrl-names的字符串，即"default",也就是设置为uart0_pins这个group的内容 */
# 多种模式在驱动中动态选择方式:
pinctrl-names = "default", "sleep";
pinctrl-0 = <&xxxx_default>;
pinctrl-1 = <&xxxx_sleep>;

# pinctrl group格式：
pinctrl-nc,pins = < arg1 arg2 >;
arg1和arg2表示一个pin的配置，在驱动中格式定死了，即cell为2，在一个group中可以设置多个pin
arg1表示pin id，arg2表示管教功能用宏MUX_MODEx表示，

# gpio range功能：
pinctrl-nc,gpio-range = <&arg1 arg2 arg3 arg4>
arg1指向的节点保存#pinctrl-nc,gpio-range-cells的property，用来解析后面参数数量，
arg2表示pin id的起始
arg3表示pin数量
arg4表示gpio模式的mode值
即[arg2, arg3)的这组range配置成gpio模式要选择模式为arg4,用MUX_MODEx表示

# 管脚功能，MUX_MODEx
参考uboot/arch/arm/mach-leo/padmux.c中的padmux_table[]和
scpu/arch/csky/mach-leo/padmux.c的padmux_table[]或者《Leo_NRE项目文档——管脚复用.pdf》

# nc,in-csky-domain;
由于ck的pinctrl控制器和a7的同一个pin id写sel的方式不同，需要维护两张表,通过这个标志告诉驱动选择哪一张表


gpiochip部分设备树参数解释:
# nc,base-gpios
系统注册gpiochip的时候如果没有主动给出base号，会从512开始向下申请给设备。而这个gpio id应用场景:
request_gpio(gpio id, xxx)
echo (gpio id) > /sys/class/gpio/export
考虑到这个gpio id以有应用使用，需要兼容。就在设备树中设置定死:
(gpio id == nc,base-gpios + hwgpio)

# nc,nr-gpios
表示这个gpiochip下gpio的数量

# gpio-ranges <&arg1 arg2 arg3 arg4>
把gpiochip的hwgpio和对应pinctrl 的pin id绑定起来，因为pin id知道怎么设置成gpio模式，参考pinctrl的设备树参数pinctrl-nc,gpio-range;
gpio range功能，主要是pinctrl提供的子功能之一，在申请gpio的时候，pinctrl会把该pin配置成gpio模式。
arg1表示这个gpiochip和arg1指向的pinctrl控制器关联
arg2表示第一个hwgpio
arg3表示第一个pin id
arg4表示数量

比如4个gpiochip都是32个gpio数量,对应2个pinctrl:
gpio: 0~31
gpiochip0 hwgpio: 0~31
pinctrl0 pin id: 0~31

gpio: 32~63
gpiochip1 hwgpio: 0~31
pinctrl0 pin id: 32~63

gpio: 64~95
ck_gpiochip0 hwgpio: 0~31
ck_pinctrl0 pin id: 0~31

gpio: 96~127
ck_gpiochip1 hwgpio: 0~31
ck_pinctrl0 pin id: 32~63

那么设置ck_gpiochip1如下：
gpio-range <&ck_pinctrl 0 32 32>


# #interrupt-cells = <2>
gpiod_get()接口申请gpio的时候需要解析设备树，默认的方式是2个u32来解析pin id和flags


